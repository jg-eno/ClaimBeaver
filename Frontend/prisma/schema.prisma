generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
  connection_limit = 10  # Adjust as needed
  pool_timeout = 30       # Increase if needed
}


model dependant {
  dependant_id      Int      @id @default(autoincrement())
  dependant_name    String   @db.VarChar(100)
  dependant_address String?  @db.VarChar(255)
  dependant_contact String?  @db.VarChar(20)
  created_at        DateTime @default(now())
  members           member[]
}

model member {
  member_id                   Int        @id @default(autoincrement())
  dependant_id                Int?
  member_name                 String     @db.VarChar(100)
  member_email                String     @unique @db.VarChar(100)
  date_of_birth               DateTime?
  gender                      gender?
  address                     String?    @db.VarChar(255)
  phone_number                String?    @db.VarChar(15)
  member_effective_start_date DateTime?
  member_effective_end_date   DateTime?
  created_at                  DateTime   @default(now())
  claims                      claim[]
  dependant                   dependant? @relation(fields: [dependant_id], references: [dependant_id])
  plans                       plan[]
}

model plan {
  plan_id          Int             @id @default(autoincrement())
  member_id        Int
  plan_name        String          @db.VarChar(100)
  plan_description String?
  plan_start_date  DateTime?
  plan_end_date    DateTime?
  created_at       DateTime        @default(now())
  member           member          @relation(fields: [member_id], references: [member_id])
  coverages        plan_coverage[]
}

model service {
  service_id          Int             @id @default(autoincrement())
  service_name        String          @db.VarChar(100)
  service_description String?
  created_at          DateTime        @default(now())
  claims              claim[]
  coverages           plan_coverage[]
}

model plan_coverage {
  plan_coverage_id Int      @id @default(autoincrement())
  plan_id          Int
  service_id       Int
  allowed_amount   Decimal  @db.Decimal(10, 2)
  copay            Decimal  @db.Decimal(5, 2)
  coinsurance      Decimal  @db.Decimal(5, 2)
  created_at       DateTime @default(now())
  plan             plan     @relation(fields: [plan_id], references: [plan_id])
  service          service  @relation(fields: [service_id], references: [service_id])
}

model provider {
  provider_id    Int      @id @default(autoincrement())
  provider_name  String   @db.VarChar(100)
  provider_type  String?  @db.VarChar(50)
  address        String?  @db.VarChar(255)
  contact_number String?  @db.VarChar(15)
  created_at     DateTime @default(now())
  claims         claim[]
}

model claim {
  claim_id        Int          @id @default(autoincrement())
  member_id       Int
  service_id      Int
  provider_id     Int
  claim_amount    Decimal      @db.Decimal(10, 2)
  service_date    DateTime?
  submission_date DateTime?
  approval_date   DateTime?
  claim_status    claim_status
  created_at      DateTime     @default(now())
  reasons         String?
  member          member       @relation(fields: [member_id], references: [member_id])
  provider        provider     @relation(fields: [provider_id], references: [provider_id])
  service         service      @relation(fields: [service_id], references: [service_id])
}

enum gender {
  M
  F
  Other
}

enum claim_status {
  Pending
  Approved
  Rejected
}
